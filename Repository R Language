# Install packages if not already installed
install.packages("readxl")
install.packages("bestNormalize")
install.packages("car")  # for multicollinearity checks
install.packages("lmtest")  # for diagnostic tests
install.packages("dplyr")  # for data manipulation

# Load the readxl package to read Excel files
library(readxl)

# Define the file paths for your data
cash_flow_file <- "c:/users/danilolima1/OneDrive - KPMG/Desktop/Documents/Data Thesis/Cash Flow data.xlsx"
stock_price_file <- "c:/users/danilolima1/OneDrive - KPMG/Desktop/Documents/Data Thesis/Stock Price.xlsx"

# Load the Excel files into R
cash_flow_data <- read_excel(cash_flow_file)
stock_price_data <- read_excel(stock_price_file)

# Display the first few rows to check if data loaded correctly
head(cash_flow_data)
head(stock_price_data)

# Load necessary libraries
library(dplyr)

# Calculate the daily stock return as (Current Price - Last Price) / Last Price
stock_price_data <- stock_price_data %>%
  group_by(Ticker) %>%
  mutate(Daily_Return = (Price - lag(Price)) / lag(Price))

# Remove rows with NA values generated by the lag function
stock_price_data <- na.omit(stock_price_data)

# Calculate the annual stock volatility (standard deviation of daily returns) grouped by year and ticker
annual_volatility <- stock_price_data %>%
  group_by(Ticker, Year) %>%
  summarize(Stock_Volatility = sd(Daily_Return, na.rm = TRUE))

# Check the first few rows of the calculated annual volatility
head(annual_volatility)

# Check column names in cash flow data
colnames(cash_flow_data)

# Check column names in the annual volatility data
colnames(annual_volatility)

# Install tidyr if you haven't already
install.packages("tidyr")
library(tidyr)

# Reshape the cash flow data
cash_flow_data_long <- cash_flow_data %>%
  pivot_longer(cols = starts_with("CFO") | starts_with("CFI") | starts_with("CFF") | starts_with("NI"),
               names_to = c(".value", "Year"),
               names_sep = " - ")

# Check the reshaped data
head(cash_flow_data_long)

# Merge the reshaped cash flow data with the annual volatility data
merged_data <- merge(cash_flow_data_long, annual_volatility, by = c("Ticker", "Year"))

# Check the first few rows of the merged data
head(merged_data)

# Load the bestNormalize package
library(bestNormalize)

# Normalize the CFO column
merged_data$CFO_norm <- bestNormalize(merged_data$CFO)$x.t

# Normalize the CFI column
merged_data$CFI_norm <- bestNormalize(merged_data$CFI)$x.t

# Normalize the CFF column
merged_data$CFF_norm <- bestNormalize(merged_data$CFF)$x.t

# Normalize the NI column
merged_data$NI_norm <- bestNormalize(merged_data$NI)$x.t

# Normalize the Stock Volatility column
merged_data$Stock_Volatility_norm <- bestNormalize(merged_data$Stock_Volatility)$x.t

# Check the first few rows of the normalized data
head(merged_data)

# Perform the regression analysis using the normalized variables
model <- lm(Stock_Volatility_norm ~ CFO_norm + CFI_norm + CFF_norm + NI_norm, data = merged_data)

# Summary of the regression results
summary(model)

# Load car library for VIF
library(car)

# Check multicollinearity
vif(model)

# Load the necessary libraries
library(ggplot2)

# Filter data for each year
data_2021 <- merged_data %>% filter(Year == 2021)
data_2022 <- merged_data %>% filter(Year == 2022)
data_2023 <- merged_data %>% filter(Year == 2023)

# Create histograms for Stock Volatility for each year
ggplot(data_2021, aes(x = Stock_Volatility)) +
  geom_histogram(binwidth = 0.005, fill = "blue", color = "black") +
  ggtitle("Histogram of Stock Volatility (2021)") +
  xlab("Stock Volatility") + ylab("Frequency")

ggplot(data_2022, aes(x = Stock_Volatility)) +
  geom_histogram(binwidth = 0.005, fill = "green", color = "black") +
  ggtitle("Histogram of Stock Volatility (2022)") +
  xlab("Stock Volatility") + ylab("Frequency")

ggplot(data_2023, aes(x = Stock_Volatility)) +
  geom_histogram(binwidth = 0.005, fill = "red", color = "black") +
  ggtitle("Histogram of Stock Volatility (2023)") +
  xlab("Stock Volatility") + ylab("Frequency")

# Create Q-Q plots for Stock Volatility for each year

# Q-Q plot for 2021
qqnorm(data_2021$Stock_Volatility, main = "Q-Q Plot for Stock Volatility (2021)")
qqline(data_2021$Stock_Volatility, col = "blue")

# Q-Q plot for 2022
qqnorm(data_2022$Stock_Volatility, main = "Q-Q Plot for Stock Volatility (2022)")
qqline(data_2022$Stock_Volatility, col = "green")

# Q-Q plot for 2023
qqnorm(data_2023$Stock_Volatility, main = "Q-Q Plot for Stock Volatility (2023)")
qqline(data_2023$Stock_Volatility, col = "red")

# Q-Q plot for 2021
dev.new()  # Open a new graphical window
qqnorm(data_2021$Stock_Volatility, main = "Q-Q Plot for Stock Volatility (2021)")
qqline(data_2021$Stock_Volatility, col = "blue")

# Q-Q plot for 2022
dev.new()  # Open another graphical window
qqnorm(data_2022$Stock_Volatility, main = "Q-Q Plot for Stock Volatility (2022)")
qqline(data_2022$Stock_Volatility, col = "green")

# Q-Q plot for 2023
dev.new()  # Open yet another graphical window
qqnorm(data_2023$Stock_Volatility, main = "Q-Q Plot for Stock Volatility (2023)")
qqline(data_2023$Stock_Volatility, col = "red")

# Shapiro-Wilk test for 2021
shapiro.test(data_2021$Stock_Volatility)

# Shapiro-Wilk test for 2022
shapiro.test(data_2022$Stock_Volatility)

# Shapiro-Wilk test for 2023
shapiro.test(data_2023$Stock_Volatility)

# Apply log transformation to Stock Volatility (only for positive values)
merged_data$Log_Stock_Volatility <- log(merged_data$Stock_Volatility)

# Check normality again (Q-Q plot and Shapiro-Wilk test)
qqnorm(merged_data$Log_Stock_Volatility, main = "Q-Q Plot for Log-Transformed Stock Volatility")
qqline(merged_data$Log_Stock_Volatility, col = "blue")

shapiro.test(merged_data$Log_Stock_Volatility)

# Apply Box-Cox transformation using bestNormalize
boxcox_trans <- bestNormalize::boxcox(merged_data$Stock_Volatility)

# Store the transformed values
merged_data$BoxCox_Stock_Volatility <- boxcox_trans$x.t

# Check normality again (Q-Q plot and Shapiro-Wilk test)
qqnorm(merged_data$BoxCox_Stock_Volatility, main = "Q-Q Plot for Box-Cox Transformed Stock Volatility")
qqline(merged_data$BoxCox_Stock_Volatility, col = "blue")

shapiro.test(merged_data$BoxCox_Stock_Volatility)

# Filter data for each year
data_2021 <- merged_data %>% filter(Year == 2021)
data_2022 <- merged_data %>% filter(Year == 2022)
data_2023 <- merged_data %>% filter(Year == 2023)

# Generate Q-Q plots for Box-Cox transformed Stock Volatility for each year

# Q-Q plot for 2021
qqnorm(data_2021$BoxCox_Stock_Volatility, main = "Q-Q Plot for Box-Cox Transformed Stock Volatility (2021)")
qqline(data_2021$BoxCox_Stock_Volatility, col = "blue")

# Q-Q plot for 2022
qqnorm(data_2022$BoxCox_Stock_Volatility, main = "Q-Q Plot for Box-Cox Transformed Stock Volatility (2022)")
qqline(data_2022$BoxCox_Stock_Volatility, col = "green")

# Q-Q plot for 2023
qqnorm(data_2023$BoxCox_Stock_Volatility, main = "Q-Q Plot for Box-Cox Transformed Stock Volatility (2023)")
qqline(data_2023$BoxCox_Stock_Volatility, col = "red")

# Run the regression analysis using the Box-Cox transformed Stock Volatility
model_boxcox <- lm(BoxCox_Stock_Volatility ~ CFO_norm + CFI_norm + CFF_norm + NI_norm, data = merged_data)

# Summary of the regression results
summary(model_boxcox)

# Load the car package (if not already loaded)
library(car)

# Check multicollinearity
vif(model_boxcox)

# Check multicollinearity using VIF
library(car)

# Check VIF for the model
vif(model_boxcox)

# Plot residuals vs fitted values to check for linearity
plot(model_boxcox$fitted.values, model_boxcox$residuals, 
     main = "Residuals vs Fitted Values (Linearity Check)", 
     xlab = "Fitted Values", ylab = "Residuals", 
     pch = 20, col = "blue")
abline(h = 0, col = "red")

# Load the lmtest package if not already loaded
library(lmtest)

# Perform the Breusch-Pagan test for homoscedasticity
bptest(model_boxcox)

# Install the necessary packages if not already installed
install.packages("sandwich")
install.packages("lmtest")

# Load the libraries
library(sandwich)
library(lmtest)

# Apply robust standard errors to the model
robust_se_model <- coeftest(model_boxcox, vcov = vcovHC(model_boxcox, type = "HC1"))

# Display the results with robust standard errors
robust_se_model

# Generate Q-Q plot for residuals
qqnorm(model_boxcox$residuals, main = "Q-Q Plot for Residuals")
qqline(model_boxcox$residuals, col = "red")

# Residuals vs Fitted Values plot to visually inspect for heteroscedasticity
plot(model_boxcox$fitted.values, model_boxcox$residuals, 
     main = "Residuals vs Fitted Values (Homoscedasticity Check)", 
     xlab = "Fitted Values", ylab = "Residuals", 
     pch = 20, col = "blue")
abline(h = 0, col = "red")

# Perform the Breusch-Pagan test
library(lmtest)
bptest(model_boxcox)

# Descriptive statistics for all variables in the dataset
summary(merged_data[, c("BoxCox_Stock_Volatility", "CFO_norm", "CFI_norm", "CFF_norm", "NI_norm")])

# Calculate standard deviation for each variable
sd_stock_volatility <- sd(merged_data$BoxCox_Stock_Volatility)
sd_cfo <- sd(merged_data$CFO_norm)
sd_cfi <- sd(merged_data$CFI_norm)
sd_cff <- sd(merged_data$CFF_norm)
sd_ni <- sd(merged_data$NI_norm)

# Display standard deviations
sd_stock_volatility
sd_cfo
sd_cfi
sd_cff
sd_ni

# Load necessary libraries
library(dplyr)

# Function to calculate descriptive statistics for a given year
calculate_descriptive_stats <- function(data, year) {
  data_filtered <- data %>% filter(Year == year)
  
  stats <- data.frame(
    Variable = c("CFO", "CFI", "CFF", "NI", "Log_SV"),
    Count = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], length),
    Mean = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], mean),
    Std_Dev = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], sd),
    Min = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], min),
    Q1 = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], quantile, probs = 0.25),
    Median = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], median),
    Q3 = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], quantile, probs = 0.75),
    Max = sapply(data_filtered[, c("CFO", "CFI", "CFF", "NI", "BoxCox_Stock_Volatility")], max)
  )
  
  return(stats)
}

# Calculate statistics for each year
stats_2021 <- calculate_descriptive_stats(merged_data, 2021)
stats_2022 <- calculate_descriptive_stats(merged_data, 2022)
stats_2023 <- calculate_descriptive_stats(merged_data, 2023)

# View the statistics for each year
stats_2021
stats_2022
stats_2023

install.packages("writexl")

library(writexl)

# Create a list of data frames to save multiple sheets in one Excel file
stats_list <- list(
  "Descriptive_Statistics_2021" = stats_2021,
  "Descriptive_Statistics_2022" = stats_2022,
  "Descriptive_Statistics_2023" = stats_2023
)

# Save the Excel file to your desired path
write_xlsx(stats_list, "c:/users/danilolima1/OneDrive - KPMG/Desktop/Documents/Data Thesis/Descriptive_Statistics.xlsx")

# Load necessary library
library(dplyr)

# Select relevant columns for correlation
data_for_corr <- merged_data %>% 
  select(CFF_norm, CFI_norm, CFO_norm, NI_norm, BoxCox_Stock_Volatility)

# Rename columns for clarity in the correlation matrix
colnames(data_for_corr) <- c("CFF", "CFI", "CFO", "NI", "SV")

# Compute the correlation matrix
correlation_matrix <- cor(data_for_corr)

# Display the correlation matrix
print(correlation_matrix)

# Calculate the model fit statistics for the regression model
model_stats <- summary(model_boxcox)

# Extract AIC, BIC, and Log-Likelihood
aic_value <- AIC(model_boxcox)
bic_value <- BIC(model_boxcox)
log_likelihood <- logLik(model_boxcox)

# Print the results
cat("AIC:", aic_value, "\n")
cat("BIC:", bic_value, "\n")
cat("Log-Likelihood:", log_likelihood, "\n")

shapiro.test(merged_data$BoxCox_Stock_Volatility)
shapiro.test(merged_data$CFO_norm)
shapiro.test(merged_data$CFI_norm)
shapiro.test(merged_data$CFF_norm)
shapiro.test(merged_data$NI_norm)

install.packages("stargazer")

library(stargazer)

stargazer(model_boxcox, type = "text", title = "Regression Results", 
          dep.var.labels = c("Stock Volatility (SV)"), 
          covariate.labels = c("CFF", "CFI", "CFO", "NI"), 
          intercept.bottom = TRUE, digits = 4, 
          omit.stat = c("f", "ser"), 
          ci = TRUE, ci.level = 0.95)

stargazer(model_boxcox, type = "html", out = "regression_results.html",
          title = "Regression Results", dep.var.labels = c("Stock Volatility (SV)"),
          covariate.labels = c("CFF", "CFI", "CFO", "NI"), intercept.bottom = TRUE,
          digits = 4, omit.stat = c("f", "ser"), ci = TRUE, ci.level = 0.95)

# Load necessary libraries
library(ggplot2)

# Create a data frame with coefficients and confidence intervals
coef_data <- data.frame(
  Variable = c("CFF", "CFI", "CFO", "NI"),
  Coefficient = c(-0.0884, 0.1382, -0.1204, -0.3343),
  CI_Lower = c(-0.1493, -0.3497, -0.0421, -0.3591),
  CI_Upper = c(0.1489, 0.1728, 0.3187, 0.1181)
)

# Plot the coefficients with confidence intervals
ggplot(coef_data, aes(x = Variable, y = Coefficient)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = CI_Lower, ymax = CI_Upper), width = 0.2) +
  theme_minimal() +
  labs(title = "Coefficient Estimates with 95% Confidence Intervals",
       x = "Variable",
       y = "Coefficient")
